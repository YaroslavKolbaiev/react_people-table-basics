{"version":3,"sources":["api.ts","components/PersonLink.tsx/PersonLink.tsx","components/PeopleTable.tsx/PeopleTable.tsx","components/Loader/Loader.tsx","Pages.tsx/PeoplePage.tsx","App.tsx","index.tsx"],"names":["getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","ok","Error","json","PersonLink","parent","existingPerson","className","classNames","sex","to","slug","PeopleTable","people","selectedPerson","personsParent","find","person","name","activePerson","map","born","died","motherName","fatherName","Loader","PeoplePage","useState","setPeople","useParams","loading","setLoading","showPeople","setShowPeople","dropError","setDropError","useEffect","fetchPeople","peopleFromServer","length","App","role","isActive","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.5cff2f7e.chunk.js","sourcesContent":["import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => {\n      if (!response.ok) {\n        throw new Error();\n      }\n\n      return response.json();\n    });\n}\n","import classNames from 'classnames';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  parent: string | null\n  existingPerson: (value: string | null) => Person | undefined\n};\n\nexport const PersonLink: React.FC<Props> = ({\n  parent,\n  existingPerson,\n}) => {\n  return (\n    <td>\n      {!parent\n        && '-' }\n      {existingPerson(parent)\n        ? (\n          <Link\n            className={classNames(\n              { 'has-text-danger': existingPerson(parent)?.sex === 'f' },\n            )}\n            to={`/people/${existingPerson(parent)?.slug}`}\n          >\n            {parent}\n          </Link>\n        )\n        : parent}\n    </td>\n  );\n};\n","import classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from '../PersonLink.tsx';\n\ntype Props = {\n  people: Person[]\n  selectedPerson: string\n};\n\nexport const PeopleTable: React.FC<Props> = ({ people, selectedPerson }) => {\n  const existingPerson = (personsParent: string | null) => {\n    return people.find(person => person.name === personsParent);\n  };\n\n  const activePerson = people.find(\n    person => person.slug === selectedPerson,\n  );\n\n  return (\n    <div className=\"block\">\n      <div className=\"box table-container\">\n\n        <table\n          data-cy=\"peopleTable\"\n          className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n        >\n          <thead>\n            <tr>\n              <th>Name</th>\n              <th>Sex</th>\n              <th>Born</th>\n              <th>Died</th>\n              <th>Mother</th>\n              <th>Father</th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {people.map(person => (\n              <tr\n                data-cy=\"person\"\n                key={person.slug}\n                className={classNames({\n                  'has-background-warning':\n                  person.slug === activePerson?.slug,\n                })}\n              >\n                <td>\n                  <Link\n                    className={classNames(\n                      { 'has-text-danger': person.sex === 'f' },\n                    )}\n                    to={`/people/${person.slug}`}\n                  >\n                    {person.name}\n                  </Link>\n                </td>\n\n                <td>{person.sex}</td>\n                <td>{person.born}</td>\n                <td>{person.died}</td>\n                <PersonLink\n                  parent={person.motherName}\n                  existingPerson={existingPerson}\n                />\n\n                <PersonLink\n                  parent={person.fatherName}\n                  existingPerson={existingPerson}\n                />\n              </tr>\n            ))}\n\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { getPeople } from '../api';\nimport { PeopleTable } from '../components/PeopleTable.tsx';\nimport { Person } from '../types';\nimport { Loader } from '../components/Loader';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const { slug = '' } = useParams();\n  const [loading, setLoading] = useState(false);\n  const [showPeople, setShowPeople] = useState(false);\n  const [dropError, setDropError] = useState(false);\n\n  useEffect(() => {\n    setShowPeople(false);\n    setLoading(true);\n    setDropError(false);\n    const fetchPeople = async () => {\n      try {\n        const peopleFromServer = await getPeople();\n\n        setPeople(peopleFromServer);\n        setLoading(false);\n        setShowPeople(true);\n      } catch (error) {\n        setLoading(false);\n        setDropError(true);\n      }\n    };\n\n    fetchPeople();\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      {showPeople && (\n        !people.length ? (\n          <p data-cy=\"noPeopleMessage\">\n            There are no people on the server\n          </p>\n        ) : (\n          <PeopleTable people={people} selectedPerson={slug} />\n        )\n      )}\n\n      {loading && <Loader /> }\n      {dropError && (\n        <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n          Something went wrong\n        </p>\n      )}\n    </>\n  );\n};\n","import {\n  NavLink, Route, Routes, Navigate,\n} from 'react-router-dom';\nimport classNames from 'classnames';\nimport './App.scss';\nimport { PeoplePage } from './Pages.tsx';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            className={({ isActive }) => classNames(\n              'navbar-item', { 'has-background-grey-lighter': isActive },\n            )}\n            to=\"/\"\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            className={({ isActive }) => classNames(\n              'navbar-item', { 'has-background-grey-lighter': isActive },\n            )}\n            to=\"people\"\n          >\n            People\n          </NavLink>\n\n        </div>\n      </div>\n    </nav>\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"/\" element={<h1 className=\"title\">Home page</h1>} />\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}